/*
 * build Gradle build script
 */

def buildProject = project

/* Configure the rootProject */
configure(rootProject) {
  defaultTasks = [':build']
  buildDir = buildProject.buildDir

  task build {
    dependsOn ":${buildProject.name}:build"
    dependsOn ":${buildProject.name}:checkNeeded"
    dependsOn ":${buildProject.name}:dist"
    description "Assembles and packages the ${buildProject.name} project."
    group 'build'
  }
}

import org.apache.tools.ant.filters.ReplaceTokens
import aQute.bnd.osgi.Jar

/*
 * Copy the bundle outputs of the specified projects into a directory
 */
void copyProjectBundles(String[] projs, String dstDir) {
  def targetDir = file(dstDir)
  if ((!targetDir.exists() && !targetDir.mkdirs()) || !targetDir.isDirectory()) {
    throw new GradleException("Could not create directory ${targetDir}")
  }
  projs.each {
    def proj = rootProject.findProject(it)
    if (proj == null) {
      throw new GradleException("Could not find project ${it}")
    }

    proj.bnd.project.getSubBuilders()*.getBsn().each { bsn ->
      copy {
        from project.relativePath(proj.bnd.project.getOutputFile(bsn))
        into targetDir
      }
    }
  }
}

/*
 * Generate a p2 repository.
 */
/* Eclipse settings for p2 publishing */
ext.bnd_eclipseDirectory         = cnf.file('eclipse')
ext.bnd_eclipseJar               = new File(bnd_eclipseDirectory, 'plugins/org.eclipse.equinox.launcher_1.3.100.v20150511-1540.jar')
ext.bnd_eclipseJarMain           = 'org.eclipse.equinox.launcher.Main'
ext.bnd_eclipseAntRunner         = 'org.eclipse.ant.core.antRunner'
ext.bnd_eclipseCategoryPublisher = 'org.eclipse.equinox.p2.publisher.CategoryPublisher'
ext.bnd_verbose = logger.isEnabled(LogLevel.INFO)

void generateP2Repository(String title, String antTarget, String metadataRepository, String categoryDefinition) {
  def javaArgs  = []
  if (bnd_verbose) {
    javaArgs   += '-consoleLog'
  }
  javaArgs     += '-application'
  javaArgs     += bnd_eclipseAntRunner
  javaArgs     += '-data'
  javaArgs     += buildDir
  javaArgs     += '-buildfile'
  javaArgs     += 'p2.xml'
  javaArgs     += antTarget

  def result = javaexec {
    classpath      = files(bnd_eclipseJar)
    main           = bnd_eclipseJarMain
    args           = javaArgs
  }
  if (result.exitValue != 0) {
    throw new GradleException("Could not publish features and bundles - ${title}")
  }

  javaArgs  = []
  if (bnd_verbose) {
    javaArgs   += '-consoleLog'
  }
  javaArgs     += '-application'
  javaArgs     += bnd_eclipseCategoryPublisher
  javaArgs     += '-data'
  javaArgs     += buildDir
  javaArgs     += '-metadataRepository'
  javaArgs     += "file://${buildDir}/${metadataRepository}"
  javaArgs     += '-categoryDefinition'
  javaArgs     += "file://${buildDir}/${categoryDefinition}"
  javaArgs     += '-compress'

  result = javaexec {
    classpath      = files(bnd_eclipseJar)
    main           = bnd_eclipseJarMain
    args           = javaArgs
  }
  if (result.exitValue != 0) {
    throw new GradleException("Could not categorise repository - ${title}")
  }

  /* Clean up the files Eclipse leaves behind */
  fileTree(bnd_eclipseDirectory).include('configuration/*.log').each {
    it.delete()
  }

  delete(file("${bnd_eclipseDirectory}/configuration/org.eclipse.core.runtime"))
  delete(file("${bnd_eclipseDirectory}/configuration/org.eclipse.equinox.app" ))
  delete(file("${bnd_eclipseDirectory}/configuration/org.eclipse.osgi"        ))
  delete(file("${bnd_eclipseDirectory}/p2"                                    ))
}

def generateFeatureXmlTokens() {
  def masterVersion = String.format('%s.%s-%tY%<tm%<td-%<tH%<tM%<tS-g%.7s',
                       bnd('base-version'),
                       bnd('base-version-qualifier'),
                       new Date(),
                       bnd('Git-SHA'))
  def tokens = ['master-version' : masterVersion, 'base-version' : bnd('base-version')]
  def plugins = fileTree("${buildDir}/plugins").getFiles()
  plugins.each {
    new Jar(it).withCloseable { jar ->
      tokens["${jar.getBsn()}-version"] = jar.getVersion()
    }
  }
  tokens
}

/*
 * Setup tasks (p2 plugins)
 */
task p2Plugins(type: Copy) {
  dependsOn buildNeeded
  from    zipTree("${buildDir}/${project.name}.main.jar")
  into    "${buildDir}/plugins"
  include '*.jar'

  doLast {
    copyProjectBundles(bnd('p2', '').split(/\s*,\s*/), "${buildDir}/plugins")
  }
}

/*
 * Setup tasks (p2 features)
 */
task p2FeatureTree(type: Copy) {
    dependsOn p2Plugins
    from    'feature'
    into    "${buildDir}/features"
    doFirst {
      filter(ReplaceTokens, tokens: generateFeatureXmlTokens() )
    }
    include '**/category.xml'
    include '**/feature.xml'
    inputs.files file("${buildDir}/plugins")
}

task p2Feature(type: Zip) {
  dependsOn p2FeatureTree
  destinationDir = file("${buildDir}/features")
  archiveName    = 'com.liferay.blade.tools.jar'
  from             "${buildDir}/features/com.liferay.blade.tools"
  include          'feature.xml'
}

/*
 * Setup tasks (p2 repositories)
 */
task p2 {
  description 'Generate the p2 repositories.'
  group       'release'
  dependsOn p2Plugins, p2Feature

  inputs.files file('p2.xml'),
               fileTree(buildDir)
                   .include('p2/**')
                   .include('features/category.xml')
  outputs.dir "${buildDir}/p2"

  doLast {
    generateP2Repository('Blade', 'p2Blade', 'p2', 'features/category.xml')
    //delete("${buildDir}/features")
    //delete("${buildDir}/plugins")
  }
}

task index {
  description 'Index the p2 repositories.'
  dependsOn p2
  group 'release'

  /* indexer */
  def repoindexJar = bnd.project.getBundle('org.osgi.impl.bundle.repoindex.cli', 'latest', null, ['strategy':'highest']).getFile()

  /* Bundles to index. */
  def p2_index_bundles = fileTree("${buildDir}/p2/plugins") {
    include '**/*.jar'
  }

  inputs.files p2_index_bundles

  /* Index files */
  def p2_index = new File("${buildDir}/p2/index.xml.gz")

  outputs.files p2_index

  doLast {
    /* p2 */
    def bundlesToIndex = p2_index_bundles*.absolutePath
    javaexec {
      main = '-jar' // first arg must be the jar
      args repoindexJar
      args '-r', p2_index
      args '-d', "${buildDir}/p2"
      args '-n', 'Blade'
      args bundlesToIndex
    }.assertNormalExitValue()
    logger.info 'Generated index {}.', p2_index
  }
}


/*
 * Setup tasks (distribution)
 */
task dist(type: Zip) {
  description 'Create distribution archives containing p2 repository (including R5 index).'
  group       'release'
  dependsOn index
  destinationDir = file(buildDir)
  archiveName    = 'blade-tools-latest.zip'
  from             "${buildDir}/p2"
  include          '**'
}

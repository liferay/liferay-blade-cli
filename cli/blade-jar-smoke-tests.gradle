import org.apache.tools.ant.taskdefs.condition.Os

task smokeTests
task testBladeCreateCommandClientExtension(type: JavaExec)
task testBladeCreateCommandClientExtensionInCurrentDir(type: JavaExec)
task testBladeCreateCommandFormField(type: JavaExec)
task testBladeCreateCommandJsTheme(type: JavaExec)
task testBladeCreateCommandListTemplates(type: JavaExec)
task testBladeCreateCommandMvcPortlet(type: JavaExec)
task testBladeCreateCommandReactJsWidget(type: JavaExec)
task testBladeCreateCommandSharedBundleJsWidget(type: JavaExec)
task testBladeCreateCommandVueJsWidget(type: JavaExec)
task testBladeGwCommand(type: JavaExec)
task testBladeHelpCommand(type: JavaExec)
task testBladeInitCommand(type: JavaExec)
task testBladeInitCommandBadProfileArgs(type: JavaExec)
task testBladeInitCommandLegacy(type: JavaExec)
task testBladeInitCommandList(type: JavaExec)
task testBladeInitCommandListAll(type: JavaExec)
task testBladeReturnCodeFailure(type: Exec)
task testBladeSamplesClientExtensionCommand(type: JavaExec)
task testBladeSamplesCommand(type: JavaExec)
task testBladeVersionCommand(type: JavaExec)

Set<Task> testBladeTasks = tasks.findAll {
	task -> task.name.startsWith("testBlade")
}

testBladeTasks.each {
	task ->
	task.dependsOn jar

	if (task instanceof JavaExec) {
		task.main = "-jar"
	}
}

smokeTests.dependsOn testBladeTasks

ByteArrayOutputStream errorStream = new ByteArrayOutputStream()
ByteArrayOutputStream standardStream = new ByteArrayOutputStream()
File initDir = new File(buildDir, "initTest")
File clientExtensionDir = new File(initDir, "client-extension")

testBladeCreateCommandClientExtension {
	dependsOn testBladeInitCommand

	doFirst {
		clientExtensionDir.mkdirs()
	}

	onlyIf {
		!Os.isFamily(Os.FAMILY_WINDOWS)
	}

	args = [jar.archivePath, "create", "-t", "client-extension", "--extension-name", "test123", "--extension-type", "customElement", "-d", clientExtensionDir.path, "customelementtest"]
	errorOutput = errorStream
	standardOutput = standardStream
	workingDir = initDir

	doLast {
		String error = errorStream.toString().toLowerCase()
		File projectDir = new File(clientExtensionDir, "customelementtest")
		boolean projectDirExists = projectDir.exists()

		errorStream.reset()
		standardStream.reset()

		assert projectDirExists
		assert !error.contains("error")
	}
}

testBladeCreateCommandClientExtensionInCurrentDir {
	dependsOn testBladeInitCommand

	onlyIf {
		!Os.isFamily(Os.FAMILY_WINDOWS)
	}

	args = [jar.archivePath, "create", "-t", "client-extension", "--extension-name", "test123", "--extension-type", "customElement", "customelementtest1"]
	errorOutput = errorStream
	standardOutput = standardStream
	workingDir = initDir

	doLast {
		String error = errorStream.toString().toLowerCase()
		File projectDir = new File(initDir, "customelementtest1")
		boolean projectDirExists = projectDir.exists()

		errorStream.reset()
		standardStream.reset()

		assert projectDirExists
		assert !error.contains("error")
	}
}

testBladeCreateCommandFormField {
	dependsOn testBladeInitCommand

	args = [jar.archivePath, "create", "-t", "form-field", "test-form-field"]
	errorOutput = errorStream
	standardOutput = standardStream
	workingDir = initDir

	doLast {
		String error = errorStream.toString().toLowerCase()
		File projectDir = new File(initDir, "modules/test-form-field")
		boolean projectDirExists = projectDir.exists()

		errorStream.reset()
		standardStream.reset()

		assert projectDirExists
		assert !error.contains("error")
	}
}

testBladeCreateCommandJsTheme {
	dependsOn testBladeInitCommand

	onlyIf {
		!Os.isFamily(Os.FAMILY_WINDOWS)
	}

	args = [jar.archivePath, "create", "-t", "js-theme", "test-js-theme"]
	errorOutput = errorStream
	standardOutput = standardStream
	workingDir = initDir

	doLast {
		String error = errorStream.toString().toLowerCase()
		File projectDir = new File(initDir, "themes/test-js-theme")
		boolean projectDirExists = projectDir.exists()

		errorStream.reset()
		standardStream.reset()

		assert projectDirExists
		assert !error.contains("error")
	}
}

testBladeCreateCommandListTemplates {
	args = [jar.archivePath, "create", "-l"]
	errorOutput = errorStream
	standardOutput = standardStream

	doLast {
		String error = errorStream.toString().toLowerCase()
		String output = standardStream.toString().toLowerCase()

		errorStream.reset()
		standardStream.reset()

		assert !error.contains("error")
		assert output.contains("js-theme")
		assert output.contains("js-widget")
		assert output.contains("service-builder")
	}
}

testBladeCreateCommandMvcPortlet {
	dependsOn testBladeInitCommand

	args = [jar.archivePath, "create", "-t", "mvc-portlet", "test-mvc-portlet"]
	errorOutput = errorStream
	standardOutput = standardStream
	workingDir = initDir

	doLast {
		String error = errorStream.toString().toLowerCase()
		File projectDir = new File(initDir, "modules/test-mvc-portlet")
		boolean projectDirExists = projectDir.exists()

		errorStream.reset()
		standardStream.reset()

		assert projectDirExists
		assert !error.contains("error")
	}
}

testBladeCreateCommandReactJsWidget {
	dependsOn testBladeInitCommand

	args = [jar.archivePath, "create", "-t", "js-widget", "testJsWidgetReact", "--jsTarget", "Liferay Platform Project", "--jsType", "React"]
	errorOutput = errorStream
	standardOutput = standardStream
	workingDir = initDir

	doLast {
		String error = errorStream.toString().toLowerCase()
		File projectDir = new File(initDir, "modules/testJsWidgetReact")
		boolean projectDirExists = projectDir.exists()

		errorStream.reset()
		standardStream.reset()

		assert projectDirExists
		assert !error.contains("error")
	}
}

testBladeCreateCommandSharedBundleJsWidget {
	dependsOn testBladeInitCommand

	args = [jar.archivePath, "create", "-t", "js-widget", "testJsWidgetSharedBundle", "--jsTarget", "Liferay Platform Project", "--jsType", "Shared bundle"]
	errorOutput = errorStream
	standardOutput = standardStream
	workingDir = initDir

	doLast {
		String error = errorStream.toString().toLowerCase()
		File projectDir = new File(initDir, "modules/testJsWidgetSharedBundle")
		boolean projectDirExists = projectDir.exists()

		errorStream.reset()
		standardStream.reset()

		assert projectDirExists
		assert !error.contains("error")
	}
}

testBladeCreateCommandVueJsWidget {
	dependsOn testBladeInitCommand

	args = [jar.archivePath, "create", "-t", "js-widget", "testJsWidgetVue", "--jsTarget", "Liferay Platform Project", "--jsType", "Vue.js"]
	errorOutput = errorStream
	standardOutput = standardStream
	workingDir = initDir

	doLast {
		String error = errorStream.toString().toLowerCase()
		File projectDir = new File(initDir, "modules/testJsWidgetVue")
		boolean projectDirExists = projectDir.exists()

		errorStream.reset()
		standardStream.reset()

		assert projectDirExists
		assert !error.contains("error")
	}
}

testBladeGwCommand {
	args = [jar.archivePath, "gw"]
	errorOutput = errorStream
	standardOutput = standardStream

	doLast{
		String output = standardStream.toString()
		String error = errorStream.toString().toLowerCase()

		errorStream.reset()
		standardStream.reset()

		assert output.contains(gradle.gradleVersion)
		assert !error.contains("error")
	}
}

testBladeHelpCommand {
	args = [jar.archivePath, "help"]
	errorOutput = errorStream
	standardOutput = standardStream

	doLast{
		String output = standardStream.toString()
		String error = errorStream.toString().toLowerCase()

		errorStream.reset()
		standardStream.reset()

		assert output.contains("init")
		assert !error.contains("error")
	}
}

testBladeInitCommand {
	doFirst {
		initDir.mkdirs()
	}

	args = [jar.archivePath, "init", "-v", "dxp-7.2-ga1"]
	errorOutput = errorStream
	standardOutput = standardStream
	workingDir = initDir

	doLast{
		String error = errorStream.toString().toLowerCase()

		errorStream.reset()
		standardStream.reset()

		assert !error.contains("error")
	}
}

testBladeInitCommandBadProfileArgs {
	File initDirBadProfile = new File(buildDir, "badProfileArgs")
	initDirBadProfile.mkdirs()

	args = [jar.archivePath, "init", "-v", "portal-7.4-ga8", "-b"]
	errorOutput = errorStream
	standardOutput = standardStream
	workingDir = initDirBadProfile

	doLast {
		String error = errorStream.toString().toLowerCase()
		String output = standardStream.toString().toLowerCase()

		errorStream.reset()
		standardStream.reset()

		assert error.contains("missing")
	}
}

testBladeInitCommandLegacy {
	File initDirLegacy = new File(buildDir, "initTestLegacy")

	initDirLegacy.mkdirs()

	args = [jar.archivePath, 'init', "-v", "7.2"]
	errorOutput = errorStream
	standardOutput = standardStream
	workingDir = initDirLegacy

	doLast{
		String error = errorStream.toString().toLowerCase()
		boolean projectDirExists = initDirLegacy.exists()
		boolean containsText = new File(initDirLegacy, "gradle.properties").text.contains("portal-7.2-ga2")

		errorStream.reset()
		standardStream.reset()

		assert projectDirExists
		assert !error.contains("error")
		assert containsText
	}
}

testBladeInitCommandList {
	doFirst {
		initDir.mkdirs()
	}

	args = [jar.archivePath, "init", "--list"]
	errorOutput = errorStream
	standardOutput = standardStream
	workingDir = initDir

	doLast{
		String error = errorStream.toString().toLowerCase()
		String output = standardStream.toString()

		errorStream.reset()
		standardStream.reset()

		assert !error.contains("error")
		assert !output.contains("dxp-7.2-sp1")
	}
}

testBladeInitCommandListAll {
	doFirst {
		initDir.mkdirs()
	}

	args = [jar.archivePath, "init", "-l", "--all"]
	errorOutput = errorStream
	standardOutput = standardStream
	workingDir = initDir

	doLast{
		String error = errorStream.toString().toLowerCase()
		String output = standardStream.toString()

		errorStream.reset()
		standardStream.reset()

		assert !error.contains("error")
		assert output.contains("dxp-7.2-sp1")
	}
}

testBladeReturnCodeFailure {
	commandLine "java", "-jar", jar.archivePath, "gw", "foo"
	ignoreExitValue = true
	errorOutput = errorStream
	standardOutput = standardStream

	doLast {
		String error = errorStream.toString().toLowerCase()

		errorStream.reset()
		standardStream.reset()

		assert execResult.getExitValue() > 0
		assert error.contains("foo")
	}
}

testBladeSamplesClientExtensionCommand {
	args = [jar.archivePath, "samples", "client-extensions", "-d", clientExtensionDir.path, "sample-global-css"]
	standardOutput = standardStream
	errorOutput = errorStream

	doLast{
		File projectDir = new File(clientExtensionDir, "sample-global-css")
		String error = errorStream.toString().toLowerCase()

		errorStream.reset()
		standardStream.reset()

		assert projectDir.exists()
	}
}

testBladeSamplesCommand {
	args = [jar.archivePath, "samples", "-v", "7.1"]
	standardOutput = standardStream
	errorOutput = errorStream

	doLast{
		String output = standardStream.toString()
		String error = errorStream.toString().toLowerCase()

		errorStream.reset()
		standardStream.reset()

		assert output.contains("jsp-portlet")
		assert !error.contains("error")
	}
}

testBladeVersionCommand {
	args = [jar.archivePath, "version"]
	standardOutput = standardStream
	errorOutput = errorStream

	doLast{
		String output = standardStream.toString()
		String error = errorStream.toString().toLowerCase()
		String projectVersion = project.version.replaceFirst("-", ".")

		errorStream.reset()
		standardStream.reset()

		assert !error.contains("error")
		assert output.contains(projectVersion)
	}
}